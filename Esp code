#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

// Pin Definitions
#define PULSE_PIN D2
#define PULSE_PIN_2 D3
#define LEAKAGE_SENSOR_1 D7
#define LEAKAGE_SENSOR_2 D6
#define RELAY_PIN D5

// Wi-Fi Credentials
const char* ssid = "FTRAIL";
const char* password = "Mururia8";
const char* serverUrl = "http://192.168.100.181:5000/api/sensor-readings";

// Static IP configuration
IPAddress local_IP(192, 168, 100, 112);
IPAddress gateway(192, 168, 100, 1);
IPAddress subnet(255, 255, 255, 0);
IPAddress primaryDNS(8, 8, 8, 8);
IPAddress secondaryDNS(8, 8, 4, 4);

// Global Variables
ESP8266WebServer server(80);
volatile long pulseCount = 0, pulseCount_2 = 0;
float flowRate1, flowRate2, smoothedFlowRate1 = 0, smoothedFlowRate2 = 0;
unsigned long oldTime = 0;
String relayStatus = "OFF";
const float calibrationFactor = 4.5;
const float smoothingFactor = 0.2;

// Interrupt Handlers
void ICACHE_RAM_ATTR pulseCounter() {
  pulseCount++;
}
void ICACHE_RAM_ATTR pulseCounter_2() {
  pulseCount_2++;
}

void setup() {
  Serial.begin(9600);

  // Configure static IP
  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("STA Failed to configure");
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());

  // Pin Setup
  pinMode(LEAKAGE_SENSOR_1, INPUT);
  pinMode(LEAKAGE_SENSOR_2, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);  // Initially OFF

  pinMode(PULSE_PIN, INPUT);
  attachInterrupt(digitalPinToInterrupt(PULSE_PIN), pulseCounter, FALLING);

  pinMode(PULSE_PIN_2, INPUT);
  attachInterrupt(digitalPinToInterrupt(PULSE_PIN_2), pulseCounter_2, FALLING);

  // Start Web Server
  server.on("/", handleRoot);
  server.on("/relay", handleRelayControl);
  server.begin();
  Serial.println("Web server started.");
}

void loop() {
  server.handleClient();

  if (millis() - oldTime > 10000) {
    calculateFlowRates();
    sendDataToBackend();
    oldTime = millis();
  }
}

void calculateFlowRates() {
  detachInterrupt(digitalPinToInterrupt(PULSE_PIN));
  detachInterrupt(digitalPinToInterrupt(PULSE_PIN_2));

  flowRate1 = (pulseCount * 60.0) / (calibrationFactor * (millis() - oldTime) / 1000.0);
  flowRate2 = (pulseCount_2 * 60.0) / (calibrationFactor * (millis() - oldTime) / 1000.0);

  smoothedFlowRate1 = (smoothingFactor * flowRate1) + ((1 - smoothingFactor) * smoothedFlowRate1);
  smoothedFlowRate2 = (smoothingFactor * flowRate2) + ((1 - smoothingFactor) * smoothedFlowRate2);
  
  Serial.print("Flow rate 1: ");
  Serial.print(int(flowRate1));
  Serial.print("L/min\t");

  Serial.print("Flow rate 2: ");
  Serial.print(int(flowRate2));
  Serial.print("L/min\t");

  pulseCount = 0;
  pulseCount_2 = 0;

  attachInterrupt(digitalPinToInterrupt(PULSE_PIN), pulseCounter, FALLING);
  attachInterrupt(digitalPinToInterrupt(PULSE_PIN_2), pulseCounter_2, FALLING);
}

void handleRelayControl() {
  if (server.hasArg("status")) {
    String status = server.arg("status");
    
    if (status == "ON") {
      digitalWrite(RELAY_PIN, HIGH);  // Turn pump ON
      relayStatus = "ON";
      Serial.println("Pump turned ON");
    } else if (status == "OFF") {
      digitalWrite(RELAY_PIN, LOW);   // Turn pump OFF
      relayStatus = "OFF";
      Serial.println("Pump turned OFF");
    } else {
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.send(400, "application/json", "{\"error\": \"Invalid status\"}");
      return;
    }

    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "application/json", "{\"status\": \"" + relayStatus + "\"}");
  } else {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(400, "application/json", "{\"error\": \"Missing status parameter\"}");
  }
}

void sendDataToBackend() {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;

    http.begin(client, serverUrl);
    http.addHeader("Content-Type", "application/json");

    int leak1 = digitalRead(LEAKAGE_SENSOR_1);
    int leak2 = digitalRead(LEAKAGE_SENSOR_2);

    String jsonData = "{";
    jsonData += "\"flow_rate_1\":" + String(smoothedFlowRate1) + ",";
    jsonData += "\"flow_rate_2\":" + String(smoothedFlowRate2) + ",";
    jsonData += "\"leakage_1\":" + String(leak1 == LOW ? 1 : 0) + ",";
    jsonData += "\"leakage_2\":" + String(leak2 == LOW ? 1 : 0) + ",";
    jsonData += "\"relay_status\":\"" + relayStatus + "\"";
    jsonData += "}";

    int httpResponseCode = http.POST(jsonData);
    if (httpResponseCode > 0) {
      Serial.println("POST Success: " + String(httpResponseCode));
    } else {
      Serial.println("POST Error: " + String(httpResponseCode));
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }
}

void handleRoot() {
  String html = "<html><body>";
  html += "<h1>Relay Status: " + relayStatus + "</h1>";
  html += "<button onclick=\"fetch('/relay?status=ON')\">Turn ON</button>";
  html += "<button onclick=\"fetch('/relay?status=OFF')\">Turn OFF</button>";
  html += "</body></html>";

  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/html", html);
}
